<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kaishengit.mapper.UserMapper">

	<!-- <cache/> -->
	<!-- <cache readOnly="true" size="2048" flushInterval="60" eviction="FIFO"/> -->

	<!-- namespace属性值推荐写成类似完全限定名的形式 -->

	<sql id="allColumns">
		id,user_name,password,address,dept_id
	</sql>

	<!-- 
		根据Id查询User对象
		id: 类似方法名
		parameterType : 参数类型（可选）
		resultType : 返回值类型(可选) 
	-->
	<!-- <select id="findById" parameterType="int" resultType="User" useCache="false">
		select 
		<include refid="allColumns"/>
		 from t_user where id = #{id}
	</select>
	
	<select id="findAll" resultType="User">
		select <include refid="allColumns"/> from t_user
	</select>
	
	<select id="findByUserNameAndPassword" resultType="User">
		select <include refid="allColumns"/> from t_user where user_name = #{arg0} and password = #{arg1}
	</select>
	
	<select id="findByMapParam" parameterType="map" resultType="User">
		select <include refid="allColumns"/> from t_user where user_name = #{name} and password = #{pwd}
	</select>
	 -->
	
	<select id="searchByNameAndAddress" parameterType="map" resultType="User">
		select 
			<include refid="allColumns"/>
		from
			t_user
		<trim prefix="where" prefixOverrides="and|or">
			<if test="name != null and name != ''">
				user_name = #{name}  
			</if>
			<if test="address != null and address != ''">
				and address = #{address}
			</if>
		</trim>
	</select>
	
	
	
	<!-- ONGL 进行映射 -->
	<select id="findAllLoadDept" resultType="User">
		SELECT
			t_user.id,
			user_name,
			address,
			PASSWORD,
			dept_id,
			t_dept.id AS `dept.id`,
			t_dept.dept_name AS `dept.deptName`
		FROM
			t_user,
			t_dept
		WHERE
			t_user.dept_id = t_dept.id
	</select>
	
	
	
	
	
	
	
	
	
	
	<!-- <select id="findAllLoadDept" resultMap="userMap">
		select t_user.id,user_name,address,password,dept_id,dept_name from t_user,t_dept
		where t_user.dept_id = t_dept.id
	</select> -->
	
	<!-- 自定义结果集映射：告诉MyBaits如何将列和类的属性进行对应 -->
	<!-- <resultMap type="User" id="userMap">
		<id column="id" property="id"/>
		<result column="user_name" property="userName"/>
		<result column="address" property="address"/>
		<result column="password" property="password"/>
		<result column="dept_id" property="deptId"/>
		<association property="dept" javaType="Dept">
			<id column="dept_id" property="id"/>
			<result column="dept_name" property="deptName"/>
		</association>
	</resultMap> -->
	
	
	
	<!-- <insert id="save" parameterType="User" useGeneratedKeys="true" keyProperty="id" flushCache="false">
		insert into t_user(user_name,password,address) values(#{userName},#{password},#{address})
	</insert> -->
	
	<insert id="batchSave" parameterType="list">
		insert into t_user(user_name,password,address,dept_id) values
		<foreach collection="list" item="user" separator=",">
			(#{user.userName},#{user.password},#{user.address},#{user.deptId})
		</foreach>
	</insert>
	
	<!-- <update id="update" parameterType="User">
		update t_user set user_name=#{userName},password=#{password},address=#{address} where id = #{id}
	</update> -->
	
	<!-- <delete id="delById" parameterType="int">
		delete from t_user where id = #{id}
	</delete> -->
	
	<delete id="delByIds" parameterType="list">
		delete from t_user where id in 
		<foreach collection="list" item="id" separator="," open="(" close=")">
			#{id}
		</foreach>
		
	</delete>
	
	
</mapper>